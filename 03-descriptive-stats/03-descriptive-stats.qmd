---
title: Descriptive Stats
subtitle: "https://bit.ly/43qQQ4y"
author:
  - name: Camilo G.
    email: ca.garcia2@uniandes.edu.co
  - name: Alejandro C.
    email: a.castellanoss@uniandes.edu.co
  - name: Angie T.
    email: am.tovar11@uniandes.edu.co
format:
  revealjs:
    footer: |
      BIOL2205 - IeI - Universidad de los Andes
    standalone: true
    preview-links: auto
    center: true
    slide-number: true
    fig-align: center
    code-line-numbers: false
    overview: true
    code-link: true
    code-annotations: hover
    highlight-style: ayu
    df-print: paged
    scrollable: true
    fig-height: 8
    fig-width: 8
    fig-dpi: 320
    theme: ../theme.scss
    bibliography: ../references.bib
---

# Generalities

# Summary stats

***

![](../02-intro-tidyverse/figs/palmer-penguins.png)

```{r}
#| eval: true
library(palmerpenguins)
```
# Mean & Median

***

**Sample mean:**
$$
\overline{x} = \frac{1}{n}\sum^{n}_{i=1}x_{i}
$$

. . .

You can create the function:
```{r}
#| echo: true
new_mean <- function(x){sum(x)/length(x)}
```

. . .

```{r}
#| label: sample_mean
#| echo: true
#| eval: true
#| fig-align: center
new_mean(penguins$year)
```

. . .

Or simply use a predefined `mean`:
```{r}
#| label: mean
#| echo: true
#| eval: true
#| fig-align: center
mean(penguins$year, na.rm=TRUE)
```


***

**Sample median:**
$$
median=
\begin{cases}
x_{(n+1)/2} &\text{if $n \equiv 1$}     \\
\frac{(x_{n/2} + x_{((n/2)+1)})}{2} &\text{if $n \equiv 0$}
\end{cases}
$$

. . . 

In R a freshly defined function:

```{r}
#| label: new-median-function
#| echo: true
#| eval: true
#| fig-align: center
new_median <- function(x) {
  if(length(x) %% 2 != 0){ #<1>
   (sort(x)[length(x)/2] + sort(x)[(length(x)/2)+1])/2 #<2> 
      } else{
       sort(x)[ceiling(length(x)/2)] #<3>
    }
   }
```
1. The operator `%%` is called modulus. In this case, will return the remainder of the division (in this case by 2), and then will check if this value is different than 0. If so, then will apply the equation for the odd-numbered list.
2. Equation for n if it is odd
3. Equation for n if it is even

. . .

```{r}
#| label: new-median
#| echo: true
#| eval: true
#| fig-align: center
new_median(penguins$body_mass_g)
```

. . .

Or the predefined function

```{r}
#| label: median
#| echo: true
#| eval: true
#| fig-align: center
median(penguins$body_mass_g, na.rm = TRUE)
```

# Variance, Standard deviation & Variation coefficient

***

**Sample variance (unbiased):**
$$
S^{2} = \frac{1}{n-1}\sum^{n}_{i=1}(x_{i}-\overline{x})^{2}
$$

. . .

```{r}
#| label: variance
#| echo: true
#| eval: true
#| fig-align: center
var(penguins$body_mass_g, na.rm=TRUE)
```

***

**Standard deviation**

$$
S = \sqrt{\frac{1}{n-1}\sum^{n}_{i=1}(x_{i}-\overline{x})^{2}}
$$

. . .

```{r}
#| label: sd
#| echo: true
#| eval: true
#| fig-align: center
sd(penguins$body_mass_g, na.rm=TRUE)
```

***

**Variation coefficient**

$$
CV = \frac{S}{\overline{x}} \times 100
$$

. . .

```{r}
#| label: cv-function
#| echo: true
#| eval: true
#| fig-align: center
cv <- function(x, na.rm=TRUE){(sd(x, na.rm=TRUE)/mean(x, na.rm=TRUE))*100}
```

. . .

```{r}
#| label: cv
#| echo: true
#| eval: true
#| fig-align: center
cv(penguins$body_mass_g, na.rm=TRUE)
```


## Confidence intervals

pending

# Using `dplyr` for summarizing stats

***

```{r}
#| echo: true
library(dplyr)
```

. . .

##  {auto-animate="true"}

```{r}
#| label: summary-01
#| echo: true
#| eval: true
#| fig-align: center
#| output-location: default
penguins |>
    group_by(species)
```


##  {auto-animate="true"}

```{r}
#| label: summary-02
#| echo: true
#| eval: true
#| fig-align: center
#| output-location: default
penguins |>
    group_by(species) |>
    summarise(
        mean_body_mass_g = mean(body_mass_g, na.rm = TRUE)
        )
```

##  {auto-animate="true"}

```{r}
#| label: summary-03
#| echo: true
#| eval: true
#| fig-align: center
#| output-location: default
penguins |>
    group_by(species) |>
    summarise(
        mean_body_mass_g = mean(body_mass_g, na.rm = TRUE),
        variance_body_mass_g = var(body_mass_g, na.rm = TRUE)
        )

```

##  {auto-animate="true"}

```{r}
#| label: summary-04
#| echo: true
#| eval: true
#| fig-align: center
#| output-location: default
penguins |>
    group_by(species) |>
    summarise(
        mean_body_mass_g = mean(body_mass_g, na.rm = TRUE),
        variance_body_mass_g = var(body_mass_g, na.rm = TRUE),
        std_dev_body_mass_g = sd(body_mass_g, na.rm = TRUE)
        )
```

##  {auto-animate="true"}

```{r}
#| label: summary-05
#| echo: true
#| eval: true
#| fig-align: center
#| output-location: default
penguins |>
    group_by(species) |>
    summarise(
        mean_body_mass_g = mean(body_mass_g, na.rm = TRUE),
        variance_body_mass_g = var(body_mass_g, na.rm = TRUE),
        std_dev_body_mass_g = sd(body_mass_g, na.rm = TRUE),
        cv_body_mass_g = cv(body_mass_g, na.rm = TRUE)
        )
```

# Informative plots

```{r}
#| echo: true
library(ggpubr)
```
## Histograms

```{r}
#| label: histogram
#| echo: true
#| eval: true
#| fig-align: center
#| output-location: column-fragment
gghistogram(penguins,
    x = "body_mass_g",
    add = "mean", 
    rug = TRUE,
    color = "species", 
    fill = "species",
    palette = c(
        "#00AFBB", 
        "#E7B800", 
        "#FC4E07"
    )
)
```

## Box and Violin plots

```{r}
#| label: boxplot
#| echo: true
#| eval: true
#| fig-align: center
#| output-location: column-fragment
ggboxplot(penguins,
    x = "species", 
    y = "body_mass_g",
    color = "species",
    add = "jitter", 
    shape = "species",
    palette = c(
        "#00AFBB", 
        "#E7B800", 
        "#FC4E07"
    )
)
```

## Violin plots (with stats)

```{r}
#| label: violinplot
#| echo: true
#| eval: true
#| fig-align: center
#| output-location: column-fragment
ggviolin(penguins,
    x = "species", 
    y = "body_mass_g",
    color = "species",
    shape = "species",
    add = "boxplot", 
    palette = c(
        "#00AFBB", 
        "#E7B800", 
        "#FC4E07"
    )
)
```

## Scatter plot

```{r}
#| label: scatterplot
#| echo: true
#| eval: true
#| fig-align: center
#| output-location: column-fragment
ggscatter(penguins,
    x = "bill_length_mm",
    y = "body_mass_g",
    color = "black", 
    shape = 21, 
    size = 3,
    add = "reg.line", 
    conf.int = TRUE, 
    cor.coef = TRUE,
        add.params = list(
        color = "blue", 
        fill = "lightgray"
        ),
    cor.coeff.args = list(
        method = "pearson", 
        label.x = 30, 
        label.sep = "\n"
        )
)

```



## Using `across` for multiple summarizations {.smaller}

In the current workshop you're asked to summarize several descriptive stats for different variables in a dataset. To do so programmatically we introduce here the `across()` function from the `dplyr` library using the `palmerpenuins` dataset. Let's say we want to calculate the mean, median and variance of all *numeric* variables, per species.

***

```{r}
#| label: across
#| echo: true
#| eval: true
#| fig-align: center
# #| code-line-numbers: "3|4,5|6,7|8|9|10,11"
penguins |> 
    summarise(
        .by = species, # <1>
        across(
            .cols = where(is.numeric), # <2>
            .fns = list(mean = mean, median = median, variance = var), # <3>
            .names = "{.fn}_{.col}", # <4>
            na.rm = TRUE
        )
    )
```
1. This is argument replaces the `group_by` verb avoiding one pipe step
2. Here we will iterate through all the columns that are numeric.
3. This is a named list of all the functions we want to execute over the defined columns
4. This is called string interpolation, and here will create the names of the newly created variables by appending the name of the function `{.fn}` that appeared on the `.fns` list of functions to each name of the columns `{.col}` separated by the underscore `_`.
