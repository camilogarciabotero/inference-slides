---
title: An introduction to R
subtitle: https://bit.ly/3ZRsbnA
author:
  - name: Camilo G.
    email: ca.garcia2@uniandes.edu.co
    
  - name: "Daniel V."
    email: d.vivasb@uniandes.edu.co

  - name: "Victor A."
    email: v.nascimento@uniandes.edu.co

format:
  revealjs:
    footer: |
      BIOL2205 - Inferencia e Informática - Uniandes
    standalone: true
    preview-links: auto
    center: true
    slide-number: true
    fig-align: center
    code-line-numbers: false
    overview: true
    code-link: true
    code-annotations: hover
    highlight-style: ayu
    df-print: paged
    scrollable: true
    #smaller: false
    theme: ../theme.scss
---


```{r}
#| label: theme-set
#| eval: true
library(tidyverse)
library(palmerpenguins)

simple_theme <- theme_bw() +
    theme(
        plot.background = element_rect(fill = "#FDF6E3"),
        panel.background = element_rect(fill = "#FDF6E3"),
        legend.background = element_rect(fill = "#FDF6E3"),
        legend.position = "top",
        axis.title = element_text(size = 14)
    )

theme_set(simple_theme)
```


# R and Rstudio

------------------------------------------------------------------------

![R console](figs/r-fig.png){fig-align="center"}

------------------------------------------------------------------------

![Rstudio IDE](figs/rstudio-fig.png)

------------------------------------------------------------------------

![An script example](figs/script-fig.png)

# Rmarkdown and Dynamic Documents {.smaller}

------------------------------------------------------------------------

The YAML block

``` r
---
title: ”My fancy title"
author: "Camilo García"
format: html
date: 2022-10-05
---
```

. . .

Simple text (in Markdown)

``` r
# Introduction

This is **Bold** and *italics*
```

. . .

Code

```{r}
#| echo: true
#| label: demo-code
#| eval: false

library(tidyverse)
mtcars |> head()
```

. . .

LaTeX

``` bash
$$
\sum_{i}^{n} x^{i}
$$
```

::: footer
:::

------------------------------------------------------------------------

![](figs/quarto-fig.png){fig-align="center"}

# Installing Packages

------------------------------------------------------------------------

Two main commands are used to manage packages in R:

1.  Installation:

```{r}
#| label: installation
#| eval: false
#| echo: true
install.packages("pkgname")
```

. . .

2.  Loading the package:

```{r}
#| label: loading
#| eval: false
#| echo: true
library(pkgname)
```

# Getting Help

```{r}
#| label: help
#| eval: false
#| echo: true
help(function)
?function
help.search(“keyword”)
```

# Important Syntax

## Creating Objects

Anything that is created in `R` whether it is a vector, matrix, function, data, figures, strings (character), etc. can be *assigned* into an *object* using the `<-` operator:

```{r}
#| label: assign
#| echo: true
#| output-location: fragment
name <- "camilo"
name
```

. . .

```{r}
#| label: assign-mode
#| echo: true
#| output-location: fragment
typeof(name)
```

# Main Objects in R

## Vectors

A *vector* is a concatenation of other objects of the same type.

```{r}
#| label: vectors
#| echo: true

time <- c(34, 13, 65, 10) # <1>

season <- c("dry", "semidry", "rainy")

heights  <- c(1.60, 1.63, 1.85 ,1.72)

```

## Matrices

A *matrix* is an *array* of objects that are ordered in rows and columns

```{r}
#| label: matrixes
#| echo: true
#| eval: true
#| code-line-numbers: "2|3,4,4|6,7,8"
#| output-location: fragment
mx <- matrix(
    c(23, 58, 98, 54, 68, 74),
    nrow = 2,
    ncol = 3,
    byrow = FALSE,
    dimnames = list(
        rows = c("rw1", "rw2"),
        cols = c("cl1", "cl2", "cl3")
    )
)

mx
```

## Lists

A *list* is a set of ordered *components* (objects with assignments)

```{r}
#| label: lists
#| echo: true
#| output-location: fragment
student_info  <- list(name = "Alejandro", exam = 5, quizzes = c(4,5,3.5,4.2))
student_info
```

# Managing Data

## Manually Generated Data

The `seq()` function can be used to create a *sequence* of data:

```{r}
#| label: seq-data
#| echo: true
#| output-location: fragment
data  <- seq(1,100,10) 
data
```

. . .

The `rep()` function creates *repetitions* of an object $n$ times

```{r}
#| label: rep-data
#| echo: true
#| output-location: fragment
data  <- rep("Ho", 3)
data
```

------------------------------------------------------------------------

You can also generate factors/levels using the `gl()` function.

```{r}
#| label: gl-data-ex
#| echo: true
#| eval: false
gl(
    n, # levels 
    k, # replications
    length = n * k,
    labels = c("contro", "treatment"),
    ordered = FALSE
)
```

let's try an example:

. . .

```{r}
#| label: gl-data
#| echo: true
#| eval: true
## First control, then treatment:
#| output-location: fragment
experiment <- gl(2, 8, labels = c("Control", "Treat"))

experiment
```

------------------------------------------------------------------------

The `data.frame` object is a native structure/object to store table like data

```{r}
#| label: df-intro-02
#| echo: true
#| eval: true
#| code-line-numbers: "1,2|4|6"
#| output-location: fragment
size  <- c(34,50,40)
color  <- c("blue", "red", "orange")

frogs  <- data.frame(size, color)

frogs
```

## Importing Data

There are many function to *import* data to the `R` session. `read.table()` is one of the basic ones:

***

```{r}
#| label: read-table
#| echo: true
#| eval: true
#| output-location: fragment
spp_data <- read.table(
  file = "data/especies.txt",
  sep = "\t",
  h = TRUE
)
spp_data
```

***

We can select subsets of the data set using many strategies.

. . .

1. The `$` operator for column subseting:
```{r}
#| label: dollar-op
#| echo: true
#| eval: true
#| output-location: fragment
spp_data$Especie
```
***

2. The indexed way:

```{r}
#| label: index-sub
#| echo: true
#| eval: true
#| output-location: fragment
spp_data[,2]
```

***

3. Using a `subset()` and a condition:
```{r}
#| label: subset-table
#| echo: true
#| eval: true
#| output-location: fragment
subset(spp_data, Prob_presencia > 0)
```

# Common Operations

***

```{r}
#| label: operation-table
#| echo: true
#| eval: true
85+12
56-29
8*8
70/100
2^4
```

***

Importance of precedence

```{r}
#| label: expression-01-table
#| echo: true
#| eval: true
#| output-location: fragment
2+3*2-2^3
```

. . .

```{r}
#| label: expression-02-table
#| echo: true
#| eval: true
#| output-location: fragment
((2+3)*2-2)^3
```

***

Operations with *vectors*:

```{r}
#| label: df-intro
#| echo: true
#| eval: true
#| code-line-numbers: "1|3"
#| output-location: fragment
time <- c(34, 13, 65, 10)
time + 5
```

. . .

What if you want to add another value to the vector:

```{r}
#| label: vector-add
#| echo: true
#| eval: true
#| output-location: fragment
time[5] = 5
time
```
. . . 

So, the vector is now bigger:
```{r}
#| label: vector-length
#| echo: true
#| eval: true
#| output-location: fragment
length(time)
```

# Descriptive Stats

***

The simplest way to generate descriptive stats of a dataset is using `summary()` function.

```{r}
#| label: summary-length
#| echo: true
#| eval: true
#| output-location: fragment
summary(spp_data)
```

# Inspecting Data

***

[![From Data to Viz](figs/data-to-vis.png)](https://www.data-to-viz.com/index.html)

***
Let's create an histogram, using base `hist()` function:
```{r}
#| code-fold: true
hist(x = spp_data$Prob_presencia)
```

