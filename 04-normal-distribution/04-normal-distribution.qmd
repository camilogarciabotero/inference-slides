---
title: Normality and Transformations
subtitle: "https://bit.ly/41MCWbv"
author:
  - name: Camilo G.
    email: ca.garcia2@uniandes.edu.co

  - name: "Kevin J."
    email: ks.jaramillo1905@uniandes.edu.co

  - name: "Victor A."
    email: v.nascimento@uniandes.edu.co
format:
  revealjs:
    footer: |
      BIOL2205 - IeI - Universidad de los Andes
    standalone: true
    preview-links: auto
    center: true
    slide-number: true
    fig-align: center
    code-line-numbers: false
    overview: true
    code-link: true
    code-annotations: hover
    highlight-style: ayu
    df-print: paged
    scrollable: true
    fig-height: 5
    fig-width: 5
    fig-dpi: 350
    theme: ../theme.scss
    bibliography: ../references.bib
---

```{r}
#| label: theme-set
#| eval: true
library(tidyverse)
library(palmerpenguins)

simple_theme <- theme_bw() +
    theme(
        plot.background = element_rect(fill = "#FDF6E3"),
        panel.background = element_rect(fill = "#FDF6E3"),
        legend.background = element_rect(fill = "#FDF6E3"),
        legend.position = "top",
        axis.title = element_text(size = 14),
        
    )

theme_set(simple_theme)
```

# What is *normality*? {.smaller}

When the frequencies of a random variable $X$ cluster around a central value, it is said that it follows a *normal* distribution.

```{r}
#| label: 01-normality
#| eval: true
#| layout-ncol: 2
#| fig-align: center
#| code-fold: true

adelie  <- penguins |> 
  filter(species == "Adelie") |> 
  drop_na()

#Frequency plot
ggplot(adelie, aes(bill_length_mm)) + 
  geom_histogram(color = "black", fill = "#6FC1FF", bins = 20) +
  geom_vline(
    aes(xintercept = mean(bill_length_mm, na.rm = TRUE)), 
    color="red", 
    linetype="dashed", 
    size=1
    ) +
  labs(
    x = "Bill length (mm)",
    y = "Frequency"
  ) +
  annotate(
    "text", label = expression("mu == 38.8"), parse = TRUE,
    x = 36, y = 16, size = 6, colour = "red"
  )

# Density plot
ggplot(adelie, aes(bill_length_mm)) + 
  geom_histogram(aes(y = ..density..), bins = 20, color = "black", fill = "#6FC1FF") + 
  geom_density(alpha=.2, fill="#FF6666") +
  geom_vline(
    aes(xintercept = mean(bill_length_mm, na.rm = TRUE)), 
    color="red", 
    linetype="dashed", 
    size=1
    ) +
  labs(
    x = "Bill length (mm)",
    y = "Probability"
  ) +
  annotate(
    "text", label = expression("mu == 38.8"), parse = TRUE,
    x = 36, y = 0.16, size = 6, colour = "red"
  ) 
```

***

In summary a data set variable that appears to follow a normal distribution display three properties:

1.  Most values clustered around the average.
2.  Extreme values are less frequent, but not impossibles.
3.  Distribution display are quite symmetric from the mean.


# Normality assessment

***

## The Q-Q plot

Is my data really normal? Let's see the quntile-quantile (Q-Q) plot:

```{r}
#| label: qqplot-body
#| echo: true
#| eval: true
#| fig-align: center
ggplot(adelie, aes(sample = bill_length_mm)) +
    geom_qq() +
    geom_qq_line()
```

## The *Shapiro-Wilk* normality test:

In the *Shapiro-Wilk* normality test, normality is the null hypothesis. The alternative is that data *do not* follow a normal distribution. Therefore, if $p$-value $\geq \alpha$ there is no evidence against normality.

```{r}
#| label: shapiro
#| echo: true
#| eval: true
#| fig-align: center
shapiro.test(adelie$bill_length_mm)
```

# Transformations

## The Log-Normal distribution {.smaller}

By applying a log transformation to a log-normal distribution, we can go back to a normal distribution

```{r}
#| label: lognomals
#| eval: true
#| fig-align: center
#| code-fold: true
#| layout-ncol: 2
#| 
lognormal  <-  data.frame(x = rlnorm(5000, meanlog = 0, sdlog = 1))

ggplot(lognormal, aes(x = x)) +
  geom_histogram(aes(y = after_stat(density)), color = "black", fill = "#6FC1FF", bins = 20) +
  geom_density(alpha=.2, fill="#FF6666")

#Now transform the original log-normal data
normal  <- log(lognormal)

ggplot(normal, aes(x = x)) +
  geom_histogram(aes(y = after_stat(density)), color = "black", fill = "#6FC1FF", bins = 20) +
  geom_density(alpha=.2, fill="#FF6666")
```

## Other transformations {.smaller}

| Transformation           | Function                  | R command       | Use                                |
|----------------|------------------|----------------|------------------------|
| Logarithmic to the right | $x'=\ln{(x)}$             | `log(x)`        | Proportions or skewed to the right |
| Arcosin                 | $x'=\arcsin{(\sqrt{x})}$  | `asin(sqrt(x))` | Proportions or percentages         |
| Square root              | $x'=\sqrt{x+\frac{1}{2}}$ | `sqrt(x+1/2)`   | Counts                             |
| Exponential              | $x'=e^{x}$                | `exp(x)`        | skewed to the left                 |
| Reciprocal               | $x=\frac{1}{x}$           | `1/x`           | skewed to the right                |




# Informative plots

```{r}
#| echo: true
library(ggpubr)
```
## Histograms

```{r}
#| label: histogram
#| echo: true
#| eval: true
#| fig-align: center
#| output-location: column-fragment
gghistogram(penguins,
    x = "body_mass_g",
    add = "mean", 
    rug = TRUE,
    color = "species", 
    fill = "species",
    palette = c(
        "#00AFBB", 
        "#E7B800", 
        "#FC4E07"
    )
)
```

## Box and Violin plots

```{r}
#| label: boxplot
#| echo: true
#| eval: true
#| fig-align: center
#| output-location: column-fragment
ggboxplot(penguins,
    x = "species", 
    y = "body_mass_g",
    color = "species",
    add = "jitter", 
    shape = "species",
    palette = c(
        "#00AFBB", 
        "#E7B800", 
        "#FC4E07"
    )
)
```

## Violin plots (with stats)

```{r}
#| label: violinplot
#| echo: true
#| eval: true
#| fig-align: center
#| output-location: column-fragment
ggviolin(penguins,
    x = "species", 
    y = "body_mass_g",
    color = "species",
    shape = "species",
    add = "boxplot", 
    palette = c(
        "#00AFBB", 
        "#E7B800", 
        "#FC4E07"
    )
)
```

## Scatter plot

```{r}
#| label: scatterplot
#| echo: true
#| eval: true
#| fig-align: center
#| output-location: column-fragment
ggscatter(penguins,
    x = "bill_length_mm",
    y = "body_mass_g",
    color = "black", 
    shape = 21, 
    size = 3,
    add = "reg.line", 
    conf.int = TRUE, 
    cor.coef = TRUE,
        add.params = list(
        color = "blue", 
        fill = "lightgray"
        ),
    cor.coeff.args = list(
        method = "pearson", 
        label.x = 30, 
        label.sep = "\n"
        )
)

```
