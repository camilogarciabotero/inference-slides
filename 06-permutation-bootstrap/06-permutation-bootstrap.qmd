---
title: Permutation tests & Bootstrap
subtitle: "https://bit.ly/424cydp"
author:
  - name: Camilo G.
    email: ca.garcia2@uniandes.edu.co

  - name: "Daniel V."
    email: d.vivasb@uniandes.edu.co

  - name: "Victor A."
    email: v.nascimento@uniandes.edu.co
format:
  revealjs:
    footer: |
      BIOL2205 - IeI - Universidad de los Andes
    standalone: true
    preview-links: auto
    center: true
    slide-number: true
    fig-align: center
    code-line-numbers: false
    overview: true
    code-link: true
    code-annotations: hover
    highlight-style: ayu
    df-print: paged
    scrollable: true
    fig-height: 6
    fig-width: 6
    fig-dpi: 350
    theme: ../theme.scss
    bibliography: ../references.bib
---

```{r}
#| label: theme-set
#| eval: true
library(tidyverse)
library(palmerpenguins)
library(latex2exp)
library(infer)

simple_theme <- theme_bw() +
  theme(
    plot.background = element_rect(fill = "#FDF6E3"),
    panel.background = element_rect(fill = "#FDF6E3"),
    legend.background = element_rect(fill = "#FDF6E3"),
    legend.position = "top",
    axis.title = element_text(size = 14)
  )

theme_set(simple_theme)
```

## Why do we re-sampling data?

To simulate the data that would have been collected if the statistical null hypothesis were true!

## Permutation tests

Simulate replications of rearrangements of the observations to draw a possible null distribution.

## Bootstrap

Randomly re-sample the observations with *replacement* (allowing duplications) to re-calculate the test statistic of interest.

## The `infer` package {.smaller}

------------------------------------------------------------------------

![](figs/infer-logo.png){fig-align="center"}

------------------------------------------------------------------------

![](figs/infer-pipeline.png){fig-align="center" width="8"}

------------------------------------------------------------------------

The four infer verbs:

![See [Chester Ismay's talk](https://github.com/ismayc/talks/tree/master/ness-infer)](figs/infer-verbs-fig.png){fig-align="center" width="8"}

------------------------------------------------------------------------


-   `specify()` allows you to specify the variable, or relationship between variables, that you're interested in.

-   `hypothesize()` allows you to declare the null hypothesis.

-   `calculate()` a distribution of statistics from the generated data to form the null distribution.

-   `generate()` data reflecting the null hypothesis (byr permutation or bootstrap).

- `visualize()` is a set of custom functions to plot results from the infer package.

## Let's see an example of permutation

***

```{r}
library(palmerpenguins)
library(infer)
library(tidyverse)
```


::: columns

::: {.column width="50%"}
Adelie and Gentoo
```{r}
#| label: simple-barplots-01
#| fig-align: center
#| echo: false
#| eval: true
adelie_gentoo  <- penguins |> 
  filter(species != "Chinstrap") |> 
  drop_na()

ggplot(adelie_gentoo, aes(species, body_mass_g, fill = species)) +
  geom_boxplot(alpha = 0.7) +
  geom_jitter(width = 0.1)
```
:::

::: {.column width="50%"}
Adelie and Chinstrap

```{r}
#| label: simple-barplots-02
#| fig-align: center
#| echo: false
#| eval: true
adelie_chinstrap  <- penguins |> 
  filter(species != "Gentoo") |> 
  drop_na()

ggplot(adelie_chinstrap, aes(species, body_mass_g, fill = species)) +
  geom_boxplot(alpha = 0.7) +
  geom_jitter(width = 0.1)
```
:::
:::


------------------------------------------------------------------------

1.  **Calculate** the observed statistic of interest:

::: {.panel-tabset}

## Adelie and Gentoo

```{r}
#| layout-ncol: 2
#| echo: true
#| eval: true
#| fig-align: center
#| output-location: fragment
adelie_gentoo_observed <- adelie_gentoo |>
    specify(body_mass_g ~ species) |>
    calculate(
        stat = "diff in means",
        order = c("Adelie", "Gentoo")
    )

adelie_gentoo_observed
```

## Adelie and Chinstrap

```{r}
#| layout-ncol: 2
#| echo: true
#| eval: true
#| fig-align: center
#| output-location: fragment
adelie_chinstrap_observed <- adelie_chinstrap |> 
    specify(body_mass_g ~ species) |> 
    calculate(
        stat = "diff in means", 
        order = c("Adelie", "Chinstrap")
      )

adelie_chinstrap_observed
```
:::
------------------------------------------------------------------------

2.  **Generate** the null distribution of the permuted data and the p-values:

::: {.panel-tabset}
## Adelie and Gentoo
```{r}
#| layout-ncol: 2
#| echo: true
#| eval: true
#| fig-align: center
adelie_gentoo_null <- adelie_gentoo |> 
    specify(body_mass_g ~ species) |> 
    hypothesize(null = "independence") |> 
    generate(reps = 1000, type = "permute") |> 
    calculate(
        stat = "diff in means", 
        order = c("Adelie", "Gentoo")
      )

adelie_gentoo_null |> 
  get_p_value(
    obs_stat = adelie_gentoo_observed, 
    direction = "two-sided"
    )
```

## Adelie and Chinstrap
```{r}
#| layout-ncol: 2
#| echo: true
#| eval: true
#| fig-align: center
adelie_chinstrap_null <- adelie_chinstrap |> 
      specify(body_mass_g ~ species) |> 
      hypothesize(null = "independence") |> 
      generate(reps = 1000, type = "permute") |> 
      calculate(
        stat = "diff in means", 
        order = c("Adelie", "Chinstrap")
      )

adelie_chinstrap_null |> 
    get_p_value(
      obs_stat = adelie_chinstrap_observed, 
      direction = "two-sided"
    )
```
:::

------------------------------------------------------------------------

3.  **Visualize** the observed statistic against the null distribution:

::: columns

::: {.column width="50%"}
Adelie and Gentoo
```{r}
#| label: null-dist-01
#| fig-align: center
#| echo: true
#| eval: true
#| code-fold: true
visualize(adelie_gentoo_null) +
  shade_p_value(
    obs_stat = adelie_gentoo_observed, 
    direction = "two-sided"
    )
```
:::

::: {.column width="50%"}
Adelie and Chinstrap
```{r}
#| label: null-dist-02
#| fig-align: center
#| echo: true
#| eval: true
#| code-fold: true
visualize(adelie_chinstrap_null) +
  shade_p_value(
    obs_stat = adelie_chinstrap_observed, 
    direction = "two-sided"
    )
```
:::
:::

## Let's see an example of Bootstrap

***

::: {.panel-tabset}
## Adelie and Chinstrap
```{r}
#| label: bootstrap-01
#| fig-align: center
#| echo: true
#| eval: true
adelie_chinstrap_bootstrap <- adelie_chinstrap |> 
    specify(body_mass_g ~ species) |> 
    generate(reps = 1000, type = "bootstrap") |> 
    calculate(
        stat = "diff in means", 
        order = c("Adelie", "Chinstrap")
      )

ac_ci  <- adelie_chinstrap_bootstrap |> 
  get_confidence_interval(point_estimate = adelie_chinstrap_observed)

ac_ci
```


## Adelie and Gentoo

```{r}
#| label: bootstrap-02
#| fig-align: center
#| echo: true
#| eval: true
adelie_gentoo_bootstrap <- adelie_gentoo |> 
    specify(body_mass_g ~ species) |> 
    generate(reps = 1000, type = "bootstrap") |> 
    calculate(
        stat = "diff in means", 
        order = c("Adelie", "Gentoo")
      )

ag_ci  <- adelie_gentoo_bootstrap |> 
  get_confidence_interval(point_estimate = adelie_gentoo_observed)

ag_ci
```

:::

***

::: columns
::: {.column width="50%"}
Adelie and Chinstrap
```{r}
#| label: ci-01
#| fig-align: center
#| echo: true
#| eval: true
#| code-fold: true
adelie_chinstrap_bootstrap |> 
  visualize() +
  shade_confidence_interval(endpoints = ac_ci)
```
:::
::: {.column width="50%"}
Adelie and Gentoo
```{r}
#| label: ci-02
#| fig-align: center
#| echo: true
#| eval: true
#| code-fold: true
adelie_gentoo_bootstrap |> 
  visualize() +
  shade_confidence_interval(endpoints = ag_ci)
```
:::
:::

***

It tells us how the averages in body mass between Adelie and Chinstrap penguins change if we redid the experiment many times.